<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .book-card {
      height: 100%;
      transition: transform 0.3s;
    }
    .book-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .book-img {
      height: 200px;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/">Book eCommerce</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <a class="nav-link active" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#books">Books</a>
          </li>
        </ul>
        <form class="d-flex" id="searchForm">
          <input class="form-control me-2" type="search" placeholder="Search books..." id="searchInput">
          <button class="btn btn-light" type="submit">Search</button>
        </form>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <header class="bg-light py-5">
    <div class="container px-4 px-lg-5 my-5">
      <div class="text-center">
        <h1 class="display-4 fw-bolder">Book eCommerce Platform</h1>
        <p class="lead fw-normal text-muted mb-0">Discover your next favorite book</p>
      </div>
    </div>
  </header>

  <!-- Books Section -->
  <section class="py-5" id="books">
    <div class="container px-4 px-lg-5 mt-5">
      <h2 class="mb-4">Available Books</h2>
      <div class="row gx-4 gx-lg-5 row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 justify-content-center" id="booksContainer">
        <!-- Books will be loaded here dynamically -->
        <div class="col mb-5">
          <div class="card h-100 book-card">
            <div class="badge bg-dark text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Sale</div>
            <img class="card-img-top book-img" src="https://via.placeholder.com/450x300" alt="Book Cover">
            <div class="card-body p-4">
              <div class="text-center">
                <h5 class="fw-bolder">Loading Books...</h5>
                <div class="d-flex justify-content-center small text-warning mb-2">
                  <div class="bi-star-fill"></div>
                  <div class="bi-star-fill"></div>
                  <div class="bi-star-fill"></div>
                  <div class="bi-star-fill"></div>
                  <div class="bi-star-fill"></div>
                </div>
                <span class="text-muted">Please wait...</span>
              </div>
            </div>
            <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
              <div class="text-center">
                <button class="btn btn-outline-dark mt-auto" disabled>Loading...</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Order Modal -->
  <div class="modal fade" id="orderModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Place Order</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="orderForm">
            <div class="mb-3">
              <label for="customerName" class="form-label">Your Name</label>
              <input type="text" class="form-control" id="customerName" required>
            </div>
            <div class="mb-3">
              <label for="customerEmail" class="form-label">Email Address</label>
              <input type="email" class="form-control" id="customerEmail" required>
              <div class="form-text">We'll send the eBook to this email address.</div>
            </div>
            <div class="mb-3">
              <h6>Selected Book:</h6>
              <div id="selectedBookInfo" class="p-3 bg-light rounded">
                <p><strong>Title:</strong> <span id="bookTitle"></span></p>
                <p><strong>Author:</strong> <span id="bookAuthor"></span></p>
                <p><strong>Price:</strong> $<span id="bookPrice"></span></p>
              </div>
            </div>
            <div class="mb-3">
              <label for="quantity" class="form-label">Quantity</label>
              <input type="number" class="form-control" id="quantity" min="1" value="1" required>
            </div>
            <input type="hidden" id="bookId">
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="placeOrderBtn">Place Order</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Order Success Modal -->
  <div class="modal fade" id="orderSuccessModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-success text-white">
          <h5 class="modal-title">Order Successful!</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
          </div>
          <p>Your order has been placed successfully.</p>
          <p>An email with your eBook has been sent to: <strong id="confirmationEmail"></strong></p>
          <div id="emailPreviewContainer" class="mt-3 d-none">
            <p>Since this is a demo, you can view the email here:</p>
            <a href="#" id="emailPreviewLink" target="_blank" class="btn btn-sm btn-outline-primary">View Email</a>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="py-5 bg-dark">
    <div class="container">
      <p class="m-0 text-center text-white">Copyright &copy; Book eCommerce 2023</p>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM Elements
      const booksContainer = document.getElementById('booksContainer');
      const searchForm = document.getElementById('searchForm');
      const searchInput = document.getElementById('searchInput');
      const orderForm = document.getElementById('orderForm');
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      
      // Bootstrap Modals
      const orderModal = new bootstrap.Modal(document.getElementById('orderModal'));
      const orderSuccessModal = new bootstrap.Modal(document.getElementById('orderSuccessModal'));
      
      // Fetch all books and render them
      async function fetchBooks() {
        try {
          const response = await fetch('/api/books');
          const books = await response.json();
          renderBooks(books);
        } catch (error) {
          console.error('Error fetching books:', error);
          booksContainer.innerHTML = '<div class="col-12 text-center"><p class="text-danger">Error loading books. Please try again later.</p></div>';
        }
      }

      // Search books
      async function searchBooks(query) {
        try {
          const response = await fetch(`/api/books/search?title=${query}`);
          const books = await response.json();
          renderBooks(books);
        } catch (error) {
          console.error('Error searching books:', error);
        }
      }

      // Render books in the container
      function renderBooks(books) {
        booksContainer.innerHTML = '';
        
        if (books.length === 0) {
          booksContainer.innerHTML = '<div class="col-12 text-center"><p>No books found.</p></div>';
          return;
        }
        
        books.forEach(book => {
          const bookElement = document.createElement('div');
          bookElement.className = 'col mb-5';
          bookElement.innerHTML = `
            <div class="card h-100 book-card">
              <img class="card-img-top book-img" src="https://via.placeholder.com/450x300?text=${encodeURIComponent(book.title)}" alt="${book.title}">
              <div class="card-body p-4">
                <div class="text-center">
                  <h5 class="fw-bolder">${book.title}</h5>
                  <div class="mb-2">by ${book.author}</div>
                  <span>$${book.price.toFixed(2)}</span>
                </div>
              </div>
              <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
                <div class="text-center">
                  <button class="btn btn-outline-dark mt-auto buy-btn" data-book-id="${book.id}">Buy Now</button>
                </div>
              </div>
            </div>
          `;
          booksContainer.appendChild(bookElement);
        });
        
        // Add event listeners to the "Buy Now" buttons
        document.querySelectorAll('.buy-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const bookId = this.getAttribute('data-book-id');
            showOrderModal(bookId);
          });
        });
      }

      // Show order modal for a specific book
      async function showOrderModal(bookId) {
        try {
          const response = await fetch(`/api/books/${bookId}`);
          const book = await response.json();
          
          // Fill modal with book info
          document.getElementById('bookId').value = book.id;
          document.getElementById('bookTitle').textContent = book.title;
          document.getElementById('bookAuthor').textContent = book.author;
          document.getElementById('bookPrice').textContent = book.price.toFixed(2);
          
          orderModal.show();
        } catch (error) {
          console.error('Error fetching book details:', error);
        }
      }

      // Place an order
      async function placeOrder() {
        // Validate form
        if (!orderForm.checkValidity()) {
          orderForm.reportValidity();
          return;
        }
        
        // Get form data
        const bookId = document.getElementById('bookId').value;
        const quantity = parseInt(document.getElementById('quantity').value);
        const customerName = document.getElementById('customerName').value;
        const customerEmail = document.getElementById('customerEmail').value;
        
        // Create order payload
        const orderData = {
          items: [
            {
              bookId,
              quantity
            }
          ],
          customerName,
          customerEmail
        };
        
        try {
          // Show loading state
          placeOrderBtn.disabled = true;
          placeOrderBtn.textContent = 'Processing...';
          
          // Send order request
          const response = await fetch('/api/orders', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Error placing order');
          }
          
          const result = await response.json();
          
          // Show confirmation and reset form
          document.getElementById('confirmationEmail').textContent = customerEmail;
          
          // If there's a preview URL (for demo purposes), show it
          if (result.email && result.email.previewUrl) {
            document.getElementById('emailPreviewContainer').classList.remove('d-none');
            document.getElementById('emailPreviewLink').href = result.email.previewUrl;
          } else {
            document.getElementById('emailPreviewContainer').classList.add('d-none');
          }
          
          // Hide order modal and show success modal
          orderModal.hide();
          orderSuccessModal.show();
          
          // Reset form
          orderForm.reset();
        } catch (error) {
          console.error('Error placing order:', error);
          alert(`Error placing order: ${error.message}`);
        } finally {
          // Reset button state
          placeOrderBtn.disabled = false;
          placeOrderBtn.textContent = 'Place Order';
        }
      }

      // Event listeners
      searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        
        if (query) {
          searchBooks(query);
        } else {
          fetchBooks();
        }
      });
      
      placeOrderBtn.addEventListener('click', placeOrder);
      
      // Initialize
      fetchBooks();
    });
  </script>
</body>
</html> 